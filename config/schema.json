{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "backend": {
      "type": "object",
      "properties": {
        "host": {
          "type": "string",
          "description": "Host or host:port (see Hostname and Port methods)"
        },
        "scheme": {
          "type": "string",
          "description": "Scheme, either http or https",
          "enum": [
            "http",
            "https"
          ]
        }
      },
      "required": [
        "host",
        "scheme"
      ]
    },
    "transport": {
      "type": "object",
      "properties": {
        "disableKeepAlives": {
          "type": "boolean",
          "description": "If true, disables HTTP keep-alives and will only use the connection to the server for a single HTTP request. This is unrelated to TCP keep-alives."
        },
        "disableCompression": {
          "type": "boolean",
          "description": "If true, prevents the Transport from requesting compression with an 'Accept-Encoding: gzip' request header when the Request contains no existing Accept-Encoding value."
        },
        "maxIdleConns": {
          "type": "integer",
          "description": "Controls the maximum number of idle (keep-alive) connections across all hosts. Zero means no limit."
        },
        "maxIdleConnsPerHost": {
          "type": "integer",
          "description": "If non-zero, controls the maximum idle (keep-alive) connections to keep per-host. If zero, the default value is used."
        },
        "maxConnsPerHost": {
          "type": "integer",
          "description": "Optionally limits the total number of connections per host, including connections in the dialing, active, and idle states. Zero means no limit."
        },
        "idleConnTimeout": {
          "type": "string",
          "description": "The maximum amount of time an idle (keep-alive) connection will remain idle before closing itself. Zero means no limit."
        },
        "responseHeaderTimeout": {
          "type": "string",
          "description": "If non-zero, specifies the amount of time to wait for a server's response headers after fully writing the request. This time does not include the time to read the response body."
        },
        "expectContinueTimeout": {
          "type": "string",
          "description": "If non-zero, specifies the amount of time to wait for a server's first response headers after fully writing the request headers if the request has an 'Expect: 100-continue' header. Zero means no timeout and causes the body to be sent immediately, without waiting for the server to approve."
        },
        "maxResponseHeaderBytes": {
          "type": "integer",
          "description": "Specifies a limit on how many response bytes are allowed in the server's response header. Zero means to use a default limit."
        },
        "writeBufferSize": {
          "type": "integer",
          "description": "Specifies the size of the write buffer used when writing to the transport. If zero, a default size is used."
        },
        "readBufferSize": {
          "type": "integer",
          "description": "Specifies the size of the read buffer used when reading from the transport. If zero, a default size is used."
        }
      },
      "required": []
    },
    "middleware": {
      "type": "object",
      "description": "Middleware definition to be used in the namespaces and paths.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Whether the middleware is enabled or not."
        },
        "name": {
          "type": "string",
          "description": "The name of the middleware"
        }
      },
      "required": [
        "name",
        "enabled"
      ],
      "additionalProperties": true
    }
  },
  "properties": {
    "gracefulShutdownTimeout": {
      "type": "string",
      "description": "Maximum time ika will wait to achieve a graceful shutdown. Includes the time to gracefully finish all active requests, close all idle connections, and close all listeners, as well as the time to teardown all middlewares."
    },
    "server": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string",
          "description": "Specifies the TCP address for the server to listen on, in the form 'host:port'. If empty, ':http' (port 80) is used."
        },
        "disableGeneralOptionsHandler": {
          "type": "boolean",
          "description": "If true, passes 'OPTIONS *' requests to the Handler, otherwise responds with 200 OK and Content-Length: 0."
        },
        "readTimeout": {
          "type": "string",
          "description": "Maximum duration for reading the entire request, including the body. A zero or negative value means there is no timeout."
        },
        "readHeaderTimeout": {
          "type": "string",
          "description": "Amount of time allowed to read request headers. If zero, the value of ReadTimeout is used. If negative, there is no timeout."
        },
        "writeTimeout": {
          "type": "string",
          "description": "Maximum duration before timing out writes of the response. A zero or negative value means there is no timeout."
        },
        "idleTimeout": {
          "type": "string",
          "description": "Maximum amount of time to wait for the next request when keep-alives are enabled. If zero, the value of ReadTimeout is used."
        },
        "maxHeaderBytes": {
          "type": "integer",
          "description": "Controls the maximum number of bytes the server will read while parsing the request header's keys and values, including the request line. It does not limit the size of the request body."
        }
      },
      "required": []
    },
    "namespaces": {
      "type": "object",
      "patternProperties": {
        "^[a-zA-Z0-9]+$": {
          "type": "object",
          "properties": {
            "disableNamespacedPaths": {
              "type": "boolean",
              "description": "If true, disables automatically prepending \"/namespace-name\" to all paths without at least one host specified."
            },
            "hosts": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "backends": {
              "type": "array",
              "description": "Specify the backends that will be used by default for all routes.",
              "items": {
                "$ref": "#/definitions/backend"
              }
            },
            "transport": {
              "description": "Transport settings to be used when connecting to backends.",
              "$ref": "#/definitions/transport"
            },
            "middlewares": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/middleware"
              }
            },
            "paths": {
              "type": "object",
              "patternProperties": {
                "^/.*$": {
                  "type": "object",
                  "description": "The endpoint path. Please see PATH here: https://pkg.go.dev/net/http#hdr-Patterns.",
                  "properties": {
                    "rewritePath": {
                      "type": "string",
                      "description": "Rewrite the received path before the request is sent to the backends."
                    },
                    "methods": {
                      "type": "array",
                      "description": "The HTTP methods that should be allowed for this path. If it is empty, all methods are allowed.",
                      "items": {
                        "type": "string",
                        "description": "The HTTP method"
                      },
                      "default": []
                    },
                    "backends": {
                      "type": "array",
                      "description": "Override the namespace backends for this path.",
                      "items": {
                        "$ref": "#/definitions/backend"
                      }
                    },
                    "middlewares": {
                      "description": "Override the namespace-level middlewares for this endpoint.",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "$ref": "#/definitions/middleware"
                      }
                    }
                  },
                  "required": []
                }
              }
            }
          },
          "required": [
            "backends",
            "paths"
          ]
        }
      }
    }
  },
  "required": [
    "namespaces"
  ]
}
