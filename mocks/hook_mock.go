// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/alx99/ika/hook.Hook -o hook_mock.go -n HookMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// HookMock implements mm_hook.Hook
type HookMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcSetup          func(ctx context.Context, config map[string]any) (err error)
	funcSetupOrigin    string
	inspectFuncSetup   func(ctx context.Context, config map[string]any)
	afterSetupCounter  uint64
	beforeSetupCounter uint64
	SetupMock          mHookMockSetup

	funcTeardown          func(ctx context.Context) (err error)
	funcTeardownOrigin    string
	inspectFuncTeardown   func(ctx context.Context)
	afterTeardownCounter  uint64
	beforeTeardownCounter uint64
	TeardownMock          mHookMockTeardown
}

// NewHookMock returns a mock for mm_hook.Hook
func NewHookMock(t minimock.Tester) *HookMock {
	m := &HookMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.SetupMock = mHookMockSetup{mock: m}
	m.SetupMock.callArgs = []*HookMockSetupParams{}

	m.TeardownMock = mHookMockTeardown{mock: m}
	m.TeardownMock.callArgs = []*HookMockTeardownParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHookMockSetup struct {
	optional           bool
	mock               *HookMock
	defaultExpectation *HookMockSetupExpectation
	expectations       []*HookMockSetupExpectation

	callArgs []*HookMockSetupParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HookMockSetupExpectation specifies expectation struct of the Hook.Setup
type HookMockSetupExpectation struct {
	mock               *HookMock
	params             *HookMockSetupParams
	paramPtrs          *HookMockSetupParamPtrs
	expectationOrigins HookMockSetupExpectationOrigins
	results            *HookMockSetupResults
	returnOrigin       string
	Counter            uint64
}

// HookMockSetupParams contains parameters of the Hook.Setup
type HookMockSetupParams struct {
	ctx    context.Context
	config map[string]any
}

// HookMockSetupParamPtrs contains pointers to parameters of the Hook.Setup
type HookMockSetupParamPtrs struct {
	ctx    *context.Context
	config *map[string]any
}

// HookMockSetupResults contains results of the Hook.Setup
type HookMockSetupResults struct {
	err error
}

// HookMockSetupOrigins contains origins of expectations of the Hook.Setup
type HookMockSetupExpectationOrigins struct {
	origin       string
	originCtx    string
	originConfig string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmSetup *mHookMockSetup) Optional() *mHookMockSetup {
	mmSetup.optional = true
	return mmSetup
}

// Expect sets up expected params for Hook.Setup
func (mmSetup *mHookMockSetup) Expect(ctx context.Context, config map[string]any) *mHookMockSetup {
	if mmSetup.mock.funcSetup != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by Set")
	}

	if mmSetup.defaultExpectation == nil {
		mmSetup.defaultExpectation = &HookMockSetupExpectation{}
	}

	if mmSetup.defaultExpectation.paramPtrs != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by ExpectParams functions")
	}

	mmSetup.defaultExpectation.params = &HookMockSetupParams{ctx, config}
	mmSetup.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmSetup.expectations {
		if minimock.Equal(e.params, mmSetup.defaultExpectation.params) {
			mmSetup.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSetup.defaultExpectation.params)
		}
	}

	return mmSetup
}

// ExpectCtxParam1 sets up expected param ctx for Hook.Setup
func (mmSetup *mHookMockSetup) ExpectCtxParam1(ctx context.Context) *mHookMockSetup {
	if mmSetup.mock.funcSetup != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by Set")
	}

	if mmSetup.defaultExpectation == nil {
		mmSetup.defaultExpectation = &HookMockSetupExpectation{}
	}

	if mmSetup.defaultExpectation.params != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by Expect")
	}

	if mmSetup.defaultExpectation.paramPtrs == nil {
		mmSetup.defaultExpectation.paramPtrs = &HookMockSetupParamPtrs{}
	}
	mmSetup.defaultExpectation.paramPtrs.ctx = &ctx
	mmSetup.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmSetup
}

// ExpectConfigParam2 sets up expected param config for Hook.Setup
func (mmSetup *mHookMockSetup) ExpectConfigParam2(config map[string]any) *mHookMockSetup {
	if mmSetup.mock.funcSetup != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by Set")
	}

	if mmSetup.defaultExpectation == nil {
		mmSetup.defaultExpectation = &HookMockSetupExpectation{}
	}

	if mmSetup.defaultExpectation.params != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by Expect")
	}

	if mmSetup.defaultExpectation.paramPtrs == nil {
		mmSetup.defaultExpectation.paramPtrs = &HookMockSetupParamPtrs{}
	}
	mmSetup.defaultExpectation.paramPtrs.config = &config
	mmSetup.defaultExpectation.expectationOrigins.originConfig = minimock.CallerInfo(1)

	return mmSetup
}

// Inspect accepts an inspector function that has same arguments as the Hook.Setup
func (mmSetup *mHookMockSetup) Inspect(f func(ctx context.Context, config map[string]any)) *mHookMockSetup {
	if mmSetup.mock.inspectFuncSetup != nil {
		mmSetup.mock.t.Fatalf("Inspect function is already set for HookMock.Setup")
	}

	mmSetup.mock.inspectFuncSetup = f

	return mmSetup
}

// Return sets up results that will be returned by Hook.Setup
func (mmSetup *mHookMockSetup) Return(err error) *HookMock {
	if mmSetup.mock.funcSetup != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by Set")
	}

	if mmSetup.defaultExpectation == nil {
		mmSetup.defaultExpectation = &HookMockSetupExpectation{mock: mmSetup.mock}
	}
	mmSetup.defaultExpectation.results = &HookMockSetupResults{err}
	mmSetup.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmSetup.mock
}

// Set uses given function f to mock the Hook.Setup method
func (mmSetup *mHookMockSetup) Set(f func(ctx context.Context, config map[string]any) (err error)) *HookMock {
	if mmSetup.defaultExpectation != nil {
		mmSetup.mock.t.Fatalf("Default expectation is already set for the Hook.Setup method")
	}

	if len(mmSetup.expectations) > 0 {
		mmSetup.mock.t.Fatalf("Some expectations are already set for the Hook.Setup method")
	}

	mmSetup.mock.funcSetup = f
	mmSetup.mock.funcSetupOrigin = minimock.CallerInfo(1)
	return mmSetup.mock
}

// When sets expectation for the Hook.Setup which will trigger the result defined by the following
// Then helper
func (mmSetup *mHookMockSetup) When(ctx context.Context, config map[string]any) *HookMockSetupExpectation {
	if mmSetup.mock.funcSetup != nil {
		mmSetup.mock.t.Fatalf("HookMock.Setup mock is already set by Set")
	}

	expectation := &HookMockSetupExpectation{
		mock:               mmSetup.mock,
		params:             &HookMockSetupParams{ctx, config},
		expectationOrigins: HookMockSetupExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmSetup.expectations = append(mmSetup.expectations, expectation)
	return expectation
}

// Then sets up Hook.Setup return parameters for the expectation previously defined by the When method
func (e *HookMockSetupExpectation) Then(err error) *HookMock {
	e.results = &HookMockSetupResults{err}
	return e.mock
}

// Times sets number of times Hook.Setup should be invoked
func (mmSetup *mHookMockSetup) Times(n uint64) *mHookMockSetup {
	if n == 0 {
		mmSetup.mock.t.Fatalf("Times of HookMock.Setup mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmSetup.expectedInvocations, n)
	mmSetup.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmSetup
}

func (mmSetup *mHookMockSetup) invocationsDone() bool {
	if len(mmSetup.expectations) == 0 && mmSetup.defaultExpectation == nil && mmSetup.mock.funcSetup == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmSetup.mock.afterSetupCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmSetup.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Setup implements mm_hook.Hook
func (mmSetup *HookMock) Setup(ctx context.Context, config map[string]any) (err error) {
	mm_atomic.AddUint64(&mmSetup.beforeSetupCounter, 1)
	defer mm_atomic.AddUint64(&mmSetup.afterSetupCounter, 1)

	mmSetup.t.Helper()

	if mmSetup.inspectFuncSetup != nil {
		mmSetup.inspectFuncSetup(ctx, config)
	}

	mm_params := HookMockSetupParams{ctx, config}

	// Record call args
	mmSetup.SetupMock.mutex.Lock()
	mmSetup.SetupMock.callArgs = append(mmSetup.SetupMock.callArgs, &mm_params)
	mmSetup.SetupMock.mutex.Unlock()

	for _, e := range mmSetup.SetupMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSetup.SetupMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSetup.SetupMock.defaultExpectation.Counter, 1)
		mm_want := mmSetup.SetupMock.defaultExpectation.params
		mm_want_ptrs := mmSetup.SetupMock.defaultExpectation.paramPtrs

		mm_got := HookMockSetupParams{ctx, config}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmSetup.t.Errorf("HookMock.Setup got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetup.SetupMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.config != nil && !minimock.Equal(*mm_want_ptrs.config, mm_got.config) {
				mmSetup.t.Errorf("HookMock.Setup got unexpected parameter config, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmSetup.SetupMock.defaultExpectation.expectationOrigins.originConfig, *mm_want_ptrs.config, mm_got.config, minimock.Diff(*mm_want_ptrs.config, mm_got.config))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSetup.t.Errorf("HookMock.Setup got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmSetup.SetupMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSetup.SetupMock.defaultExpectation.results
		if mm_results == nil {
			mmSetup.t.Fatal("No results are set for the HookMock.Setup")
		}
		return (*mm_results).err
	}
	if mmSetup.funcSetup != nil {
		return mmSetup.funcSetup(ctx, config)
	}
	mmSetup.t.Fatalf("Unexpected call to HookMock.Setup. %v %v", ctx, config)
	return
}

// SetupAfterCounter returns a count of finished HookMock.Setup invocations
func (mmSetup *HookMock) SetupAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetup.afterSetupCounter)
}

// SetupBeforeCounter returns a count of HookMock.Setup invocations
func (mmSetup *HookMock) SetupBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSetup.beforeSetupCounter)
}

// Calls returns a list of arguments used in each call to HookMock.Setup.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSetup *mHookMockSetup) Calls() []*HookMockSetupParams {
	mmSetup.mutex.RLock()

	argCopy := make([]*HookMockSetupParams, len(mmSetup.callArgs))
	copy(argCopy, mmSetup.callArgs)

	mmSetup.mutex.RUnlock()

	return argCopy
}

// MinimockSetupDone returns true if the count of the Setup invocations corresponds
// the number of defined expectations
func (m *HookMock) MinimockSetupDone() bool {
	if m.SetupMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.SetupMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.SetupMock.invocationsDone()
}

// MinimockSetupInspect logs each unmet expectation
func (m *HookMock) MinimockSetupInspect() {
	for _, e := range m.SetupMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HookMock.Setup at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterSetupCounter := mm_atomic.LoadUint64(&m.afterSetupCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.SetupMock.defaultExpectation != nil && afterSetupCounter < 1 {
		if m.SetupMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HookMock.Setup at\n%s", m.SetupMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HookMock.Setup at\n%s with params: %#v", m.SetupMock.defaultExpectation.expectationOrigins.origin, *m.SetupMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSetup != nil && afterSetupCounter < 1 {
		m.t.Errorf("Expected call to HookMock.Setup at\n%s", m.funcSetupOrigin)
	}

	if !m.SetupMock.invocationsDone() && afterSetupCounter > 0 {
		m.t.Errorf("Expected %d calls to HookMock.Setup at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.SetupMock.expectedInvocations), m.SetupMock.expectedInvocationsOrigin, afterSetupCounter)
	}
}

type mHookMockTeardown struct {
	optional           bool
	mock               *HookMock
	defaultExpectation *HookMockTeardownExpectation
	expectations       []*HookMockTeardownExpectation

	callArgs []*HookMockTeardownParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// HookMockTeardownExpectation specifies expectation struct of the Hook.Teardown
type HookMockTeardownExpectation struct {
	mock               *HookMock
	params             *HookMockTeardownParams
	paramPtrs          *HookMockTeardownParamPtrs
	expectationOrigins HookMockTeardownExpectationOrigins
	results            *HookMockTeardownResults
	returnOrigin       string
	Counter            uint64
}

// HookMockTeardownParams contains parameters of the Hook.Teardown
type HookMockTeardownParams struct {
	ctx context.Context
}

// HookMockTeardownParamPtrs contains pointers to parameters of the Hook.Teardown
type HookMockTeardownParamPtrs struct {
	ctx *context.Context
}

// HookMockTeardownResults contains results of the Hook.Teardown
type HookMockTeardownResults struct {
	err error
}

// HookMockTeardownOrigins contains origins of expectations of the Hook.Teardown
type HookMockTeardownExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmTeardown *mHookMockTeardown) Optional() *mHookMockTeardown {
	mmTeardown.optional = true
	return mmTeardown
}

// Expect sets up expected params for Hook.Teardown
func (mmTeardown *mHookMockTeardown) Expect(ctx context.Context) *mHookMockTeardown {
	if mmTeardown.mock.funcTeardown != nil {
		mmTeardown.mock.t.Fatalf("HookMock.Teardown mock is already set by Set")
	}

	if mmTeardown.defaultExpectation == nil {
		mmTeardown.defaultExpectation = &HookMockTeardownExpectation{}
	}

	if mmTeardown.defaultExpectation.paramPtrs != nil {
		mmTeardown.mock.t.Fatalf("HookMock.Teardown mock is already set by ExpectParams functions")
	}

	mmTeardown.defaultExpectation.params = &HookMockTeardownParams{ctx}
	mmTeardown.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmTeardown.expectations {
		if minimock.Equal(e.params, mmTeardown.defaultExpectation.params) {
			mmTeardown.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmTeardown.defaultExpectation.params)
		}
	}

	return mmTeardown
}

// ExpectCtxParam1 sets up expected param ctx for Hook.Teardown
func (mmTeardown *mHookMockTeardown) ExpectCtxParam1(ctx context.Context) *mHookMockTeardown {
	if mmTeardown.mock.funcTeardown != nil {
		mmTeardown.mock.t.Fatalf("HookMock.Teardown mock is already set by Set")
	}

	if mmTeardown.defaultExpectation == nil {
		mmTeardown.defaultExpectation = &HookMockTeardownExpectation{}
	}

	if mmTeardown.defaultExpectation.params != nil {
		mmTeardown.mock.t.Fatalf("HookMock.Teardown mock is already set by Expect")
	}

	if mmTeardown.defaultExpectation.paramPtrs == nil {
		mmTeardown.defaultExpectation.paramPtrs = &HookMockTeardownParamPtrs{}
	}
	mmTeardown.defaultExpectation.paramPtrs.ctx = &ctx
	mmTeardown.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmTeardown
}

// Inspect accepts an inspector function that has same arguments as the Hook.Teardown
func (mmTeardown *mHookMockTeardown) Inspect(f func(ctx context.Context)) *mHookMockTeardown {
	if mmTeardown.mock.inspectFuncTeardown != nil {
		mmTeardown.mock.t.Fatalf("Inspect function is already set for HookMock.Teardown")
	}

	mmTeardown.mock.inspectFuncTeardown = f

	return mmTeardown
}

// Return sets up results that will be returned by Hook.Teardown
func (mmTeardown *mHookMockTeardown) Return(err error) *HookMock {
	if mmTeardown.mock.funcTeardown != nil {
		mmTeardown.mock.t.Fatalf("HookMock.Teardown mock is already set by Set")
	}

	if mmTeardown.defaultExpectation == nil {
		mmTeardown.defaultExpectation = &HookMockTeardownExpectation{mock: mmTeardown.mock}
	}
	mmTeardown.defaultExpectation.results = &HookMockTeardownResults{err}
	mmTeardown.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmTeardown.mock
}

// Set uses given function f to mock the Hook.Teardown method
func (mmTeardown *mHookMockTeardown) Set(f func(ctx context.Context) (err error)) *HookMock {
	if mmTeardown.defaultExpectation != nil {
		mmTeardown.mock.t.Fatalf("Default expectation is already set for the Hook.Teardown method")
	}

	if len(mmTeardown.expectations) > 0 {
		mmTeardown.mock.t.Fatalf("Some expectations are already set for the Hook.Teardown method")
	}

	mmTeardown.mock.funcTeardown = f
	mmTeardown.mock.funcTeardownOrigin = minimock.CallerInfo(1)
	return mmTeardown.mock
}

// When sets expectation for the Hook.Teardown which will trigger the result defined by the following
// Then helper
func (mmTeardown *mHookMockTeardown) When(ctx context.Context) *HookMockTeardownExpectation {
	if mmTeardown.mock.funcTeardown != nil {
		mmTeardown.mock.t.Fatalf("HookMock.Teardown mock is already set by Set")
	}

	expectation := &HookMockTeardownExpectation{
		mock:               mmTeardown.mock,
		params:             &HookMockTeardownParams{ctx},
		expectationOrigins: HookMockTeardownExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmTeardown.expectations = append(mmTeardown.expectations, expectation)
	return expectation
}

// Then sets up Hook.Teardown return parameters for the expectation previously defined by the When method
func (e *HookMockTeardownExpectation) Then(err error) *HookMock {
	e.results = &HookMockTeardownResults{err}
	return e.mock
}

// Times sets number of times Hook.Teardown should be invoked
func (mmTeardown *mHookMockTeardown) Times(n uint64) *mHookMockTeardown {
	if n == 0 {
		mmTeardown.mock.t.Fatalf("Times of HookMock.Teardown mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmTeardown.expectedInvocations, n)
	mmTeardown.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmTeardown
}

func (mmTeardown *mHookMockTeardown) invocationsDone() bool {
	if len(mmTeardown.expectations) == 0 && mmTeardown.defaultExpectation == nil && mmTeardown.mock.funcTeardown == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmTeardown.mock.afterTeardownCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmTeardown.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Teardown implements mm_hook.Hook
func (mmTeardown *HookMock) Teardown(ctx context.Context) (err error) {
	mm_atomic.AddUint64(&mmTeardown.beforeTeardownCounter, 1)
	defer mm_atomic.AddUint64(&mmTeardown.afterTeardownCounter, 1)

	mmTeardown.t.Helper()

	if mmTeardown.inspectFuncTeardown != nil {
		mmTeardown.inspectFuncTeardown(ctx)
	}

	mm_params := HookMockTeardownParams{ctx}

	// Record call args
	mmTeardown.TeardownMock.mutex.Lock()
	mmTeardown.TeardownMock.callArgs = append(mmTeardown.TeardownMock.callArgs, &mm_params)
	mmTeardown.TeardownMock.mutex.Unlock()

	for _, e := range mmTeardown.TeardownMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmTeardown.TeardownMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmTeardown.TeardownMock.defaultExpectation.Counter, 1)
		mm_want := mmTeardown.TeardownMock.defaultExpectation.params
		mm_want_ptrs := mmTeardown.TeardownMock.defaultExpectation.paramPtrs

		mm_got := HookMockTeardownParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmTeardown.t.Errorf("HookMock.Teardown got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmTeardown.TeardownMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmTeardown.t.Errorf("HookMock.Teardown got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmTeardown.TeardownMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmTeardown.TeardownMock.defaultExpectation.results
		if mm_results == nil {
			mmTeardown.t.Fatal("No results are set for the HookMock.Teardown")
		}
		return (*mm_results).err
	}
	if mmTeardown.funcTeardown != nil {
		return mmTeardown.funcTeardown(ctx)
	}
	mmTeardown.t.Fatalf("Unexpected call to HookMock.Teardown. %v", ctx)
	return
}

// TeardownAfterCounter returns a count of finished HookMock.Teardown invocations
func (mmTeardown *HookMock) TeardownAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeardown.afterTeardownCounter)
}

// TeardownBeforeCounter returns a count of HookMock.Teardown invocations
func (mmTeardown *HookMock) TeardownBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmTeardown.beforeTeardownCounter)
}

// Calls returns a list of arguments used in each call to HookMock.Teardown.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmTeardown *mHookMockTeardown) Calls() []*HookMockTeardownParams {
	mmTeardown.mutex.RLock()

	argCopy := make([]*HookMockTeardownParams, len(mmTeardown.callArgs))
	copy(argCopy, mmTeardown.callArgs)

	mmTeardown.mutex.RUnlock()

	return argCopy
}

// MinimockTeardownDone returns true if the count of the Teardown invocations corresponds
// the number of defined expectations
func (m *HookMock) MinimockTeardownDone() bool {
	if m.TeardownMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.TeardownMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.TeardownMock.invocationsDone()
}

// MinimockTeardownInspect logs each unmet expectation
func (m *HookMock) MinimockTeardownInspect() {
	for _, e := range m.TeardownMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HookMock.Teardown at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterTeardownCounter := mm_atomic.LoadUint64(&m.afterTeardownCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.TeardownMock.defaultExpectation != nil && afterTeardownCounter < 1 {
		if m.TeardownMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to HookMock.Teardown at\n%s", m.TeardownMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to HookMock.Teardown at\n%s with params: %#v", m.TeardownMock.defaultExpectation.expectationOrigins.origin, *m.TeardownMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcTeardown != nil && afterTeardownCounter < 1 {
		m.t.Errorf("Expected call to HookMock.Teardown at\n%s", m.funcTeardownOrigin)
	}

	if !m.TeardownMock.invocationsDone() && afterTeardownCounter > 0 {
		m.t.Errorf("Expected %d calls to HookMock.Teardown at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.TeardownMock.expectedInvocations), m.TeardownMock.expectedInvocationsOrigin, afterTeardownCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HookMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockSetupInspect()

			m.MinimockTeardownInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HookMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HookMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockSetupDone() &&
		m.MinimockTeardownDone()
}
