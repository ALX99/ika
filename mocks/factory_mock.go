// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/alx99/ika/hook.Factory -o factory_mock.go -n FactoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	mm_hook "github.com/alx99/ika/hook"
	"github.com/gojuno/minimock/v3"
)

// FactoryMock implements mm_hook.Factory
type FactoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNew          func(ctx context.Context) (h1 mm_hook.Hook, err error)
	funcNewOrigin    string
	inspectFuncNew   func(ctx context.Context)
	afterNewCounter  uint64
	beforeNewCounter uint64
	NewMock          mFactoryMockNew
}

// NewFactoryMock returns a mock for mm_hook.Factory
func NewFactoryMock(t minimock.Tester) *FactoryMock {
	m := &FactoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NewMock = mFactoryMockNew{mock: m}
	m.NewMock.callArgs = []*FactoryMockNewParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mFactoryMockNew struct {
	optional           bool
	mock               *FactoryMock
	defaultExpectation *FactoryMockNewExpectation
	expectations       []*FactoryMockNewExpectation

	callArgs []*FactoryMockNewParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// FactoryMockNewExpectation specifies expectation struct of the Factory.New
type FactoryMockNewExpectation struct {
	mock               *FactoryMock
	params             *FactoryMockNewParams
	paramPtrs          *FactoryMockNewParamPtrs
	expectationOrigins FactoryMockNewExpectationOrigins
	results            *FactoryMockNewResults
	returnOrigin       string
	Counter            uint64
}

// FactoryMockNewParams contains parameters of the Factory.New
type FactoryMockNewParams struct {
	ctx context.Context
}

// FactoryMockNewParamPtrs contains pointers to parameters of the Factory.New
type FactoryMockNewParamPtrs struct {
	ctx *context.Context
}

// FactoryMockNewResults contains results of the Factory.New
type FactoryMockNewResults struct {
	h1  mm_hook.Hook
	err error
}

// FactoryMockNewOrigins contains origins of expectations of the Factory.New
type FactoryMockNewExpectationOrigins struct {
	origin    string
	originCtx string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNew *mFactoryMockNew) Optional() *mFactoryMockNew {
	mmNew.optional = true
	return mmNew
}

// Expect sets up expected params for Factory.New
func (mmNew *mFactoryMockNew) Expect(ctx context.Context) *mFactoryMockNew {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("FactoryMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &FactoryMockNewExpectation{}
	}

	if mmNew.defaultExpectation.paramPtrs != nil {
		mmNew.mock.t.Fatalf("FactoryMock.New mock is already set by ExpectParams functions")
	}

	mmNew.defaultExpectation.params = &FactoryMockNewParams{ctx}
	mmNew.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmNew.expectations {
		if minimock.Equal(e.params, mmNew.defaultExpectation.params) {
			mmNew.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNew.defaultExpectation.params)
		}
	}

	return mmNew
}

// ExpectCtxParam1 sets up expected param ctx for Factory.New
func (mmNew *mFactoryMockNew) ExpectCtxParam1(ctx context.Context) *mFactoryMockNew {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("FactoryMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &FactoryMockNewExpectation{}
	}

	if mmNew.defaultExpectation.params != nil {
		mmNew.mock.t.Fatalf("FactoryMock.New mock is already set by Expect")
	}

	if mmNew.defaultExpectation.paramPtrs == nil {
		mmNew.defaultExpectation.paramPtrs = &FactoryMockNewParamPtrs{}
	}
	mmNew.defaultExpectation.paramPtrs.ctx = &ctx
	mmNew.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmNew
}

// Inspect accepts an inspector function that has same arguments as the Factory.New
func (mmNew *mFactoryMockNew) Inspect(f func(ctx context.Context)) *mFactoryMockNew {
	if mmNew.mock.inspectFuncNew != nil {
		mmNew.mock.t.Fatalf("Inspect function is already set for FactoryMock.New")
	}

	mmNew.mock.inspectFuncNew = f

	return mmNew
}

// Return sets up results that will be returned by Factory.New
func (mmNew *mFactoryMockNew) Return(h1 mm_hook.Hook, err error) *FactoryMock {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("FactoryMock.New mock is already set by Set")
	}

	if mmNew.defaultExpectation == nil {
		mmNew.defaultExpectation = &FactoryMockNewExpectation{mock: mmNew.mock}
	}
	mmNew.defaultExpectation.results = &FactoryMockNewResults{h1, err}
	mmNew.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNew.mock
}

// Set uses given function f to mock the Factory.New method
func (mmNew *mFactoryMockNew) Set(f func(ctx context.Context) (h1 mm_hook.Hook, err error)) *FactoryMock {
	if mmNew.defaultExpectation != nil {
		mmNew.mock.t.Fatalf("Default expectation is already set for the Factory.New method")
	}

	if len(mmNew.expectations) > 0 {
		mmNew.mock.t.Fatalf("Some expectations are already set for the Factory.New method")
	}

	mmNew.mock.funcNew = f
	mmNew.mock.funcNewOrigin = minimock.CallerInfo(1)
	return mmNew.mock
}

// When sets expectation for the Factory.New which will trigger the result defined by the following
// Then helper
func (mmNew *mFactoryMockNew) When(ctx context.Context) *FactoryMockNewExpectation {
	if mmNew.mock.funcNew != nil {
		mmNew.mock.t.Fatalf("FactoryMock.New mock is already set by Set")
	}

	expectation := &FactoryMockNewExpectation{
		mock:               mmNew.mock,
		params:             &FactoryMockNewParams{ctx},
		expectationOrigins: FactoryMockNewExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmNew.expectations = append(mmNew.expectations, expectation)
	return expectation
}

// Then sets up Factory.New return parameters for the expectation previously defined by the When method
func (e *FactoryMockNewExpectation) Then(h1 mm_hook.Hook, err error) *FactoryMock {
	e.results = &FactoryMockNewResults{h1, err}
	return e.mock
}

// Times sets number of times Factory.New should be invoked
func (mmNew *mFactoryMockNew) Times(n uint64) *mFactoryMockNew {
	if n == 0 {
		mmNew.mock.t.Fatalf("Times of FactoryMock.New mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNew.expectedInvocations, n)
	mmNew.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNew
}

func (mmNew *mFactoryMockNew) invocationsDone() bool {
	if len(mmNew.expectations) == 0 && mmNew.defaultExpectation == nil && mmNew.mock.funcNew == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNew.mock.afterNewCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNew.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// New implements mm_hook.Factory
func (mmNew *FactoryMock) New(ctx context.Context) (h1 mm_hook.Hook, err error) {
	mm_atomic.AddUint64(&mmNew.beforeNewCounter, 1)
	defer mm_atomic.AddUint64(&mmNew.afterNewCounter, 1)

	mmNew.t.Helper()

	if mmNew.inspectFuncNew != nil {
		mmNew.inspectFuncNew(ctx)
	}

	mm_params := FactoryMockNewParams{ctx}

	// Record call args
	mmNew.NewMock.mutex.Lock()
	mmNew.NewMock.callArgs = append(mmNew.NewMock.callArgs, &mm_params)
	mmNew.NewMock.mutex.Unlock()

	for _, e := range mmNew.NewMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.h1, e.results.err
		}
	}

	if mmNew.NewMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNew.NewMock.defaultExpectation.Counter, 1)
		mm_want := mmNew.NewMock.defaultExpectation.params
		mm_want_ptrs := mmNew.NewMock.defaultExpectation.paramPtrs

		mm_got := FactoryMockNewParams{ctx}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmNew.t.Errorf("FactoryMock.New got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmNew.NewMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNew.t.Errorf("FactoryMock.New got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmNew.NewMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNew.NewMock.defaultExpectation.results
		if mm_results == nil {
			mmNew.t.Fatal("No results are set for the FactoryMock.New")
		}
		return (*mm_results).h1, (*mm_results).err
	}
	if mmNew.funcNew != nil {
		return mmNew.funcNew(ctx)
	}
	mmNew.t.Fatalf("Unexpected call to FactoryMock.New. %v", ctx)
	return
}

// NewAfterCounter returns a count of finished FactoryMock.New invocations
func (mmNew *FactoryMock) NewAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNew.afterNewCounter)
}

// NewBeforeCounter returns a count of FactoryMock.New invocations
func (mmNew *FactoryMock) NewBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNew.beforeNewCounter)
}

// Calls returns a list of arguments used in each call to FactoryMock.New.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNew *mFactoryMockNew) Calls() []*FactoryMockNewParams {
	mmNew.mutex.RLock()

	argCopy := make([]*FactoryMockNewParams, len(mmNew.callArgs))
	copy(argCopy, mmNew.callArgs)

	mmNew.mutex.RUnlock()

	return argCopy
}

// MinimockNewDone returns true if the count of the New invocations corresponds
// the number of defined expectations
func (m *FactoryMock) MinimockNewDone() bool {
	if m.NewMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NewMock.invocationsDone()
}

// MinimockNewInspect logs each unmet expectation
func (m *FactoryMock) MinimockNewInspect() {
	for _, e := range m.NewMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FactoryMock.New at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterNewCounter := mm_atomic.LoadUint64(&m.afterNewCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NewMock.defaultExpectation != nil && afterNewCounter < 1 {
		if m.NewMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to FactoryMock.New at\n%s", m.NewMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to FactoryMock.New at\n%s with params: %#v", m.NewMock.defaultExpectation.expectationOrigins.origin, *m.NewMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNew != nil && afterNewCounter < 1 {
		m.t.Errorf("Expected call to FactoryMock.New at\n%s", m.funcNewOrigin)
	}

	if !m.NewMock.invocationsDone() && afterNewCounter > 0 {
		m.t.Errorf("Expected %d calls to FactoryMock.New at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NewMock.expectedInvocations), m.NewMock.expectedInvocationsOrigin, afterNewCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FactoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNewInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FactoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FactoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNewDone()
}
