// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/alx99/ika/hook.TransportHook -o transport_hook_mock.go -n TransportHookMock -p mocks

import (
	"context"
	"net/http"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TransportHookMock implements mm_hook.TransportHook
type TransportHookMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcHookTransport          func(ctx context.Context, transport http.RoundTripper) (r1 http.RoundTripper, err error)
	funcHookTransportOrigin    string
	inspectFuncHookTransport   func(ctx context.Context, transport http.RoundTripper)
	afterHookTransportCounter  uint64
	beforeHookTransportCounter uint64
	HookTransportMock          mTransportHookMockHookTransport
}

// NewTransportHookMock returns a mock for mm_hook.TransportHook
func NewTransportHookMock(t minimock.Tester) *TransportHookMock {
	m := &TransportHookMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.HookTransportMock = mTransportHookMockHookTransport{mock: m}
	m.HookTransportMock.callArgs = []*TransportHookMockHookTransportParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTransportHookMockHookTransport struct {
	optional           bool
	mock               *TransportHookMock
	defaultExpectation *TransportHookMockHookTransportExpectation
	expectations       []*TransportHookMockHookTransportExpectation

	callArgs []*TransportHookMockHookTransportParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TransportHookMockHookTransportExpectation specifies expectation struct of the TransportHook.HookTransport
type TransportHookMockHookTransportExpectation struct {
	mock               *TransportHookMock
	params             *TransportHookMockHookTransportParams
	paramPtrs          *TransportHookMockHookTransportParamPtrs
	expectationOrigins TransportHookMockHookTransportExpectationOrigins
	results            *TransportHookMockHookTransportResults
	returnOrigin       string
	Counter            uint64
}

// TransportHookMockHookTransportParams contains parameters of the TransportHook.HookTransport
type TransportHookMockHookTransportParams struct {
	ctx       context.Context
	transport http.RoundTripper
}

// TransportHookMockHookTransportParamPtrs contains pointers to parameters of the TransportHook.HookTransport
type TransportHookMockHookTransportParamPtrs struct {
	ctx       *context.Context
	transport *http.RoundTripper
}

// TransportHookMockHookTransportResults contains results of the TransportHook.HookTransport
type TransportHookMockHookTransportResults struct {
	r1  http.RoundTripper
	err error
}

// TransportHookMockHookTransportOrigins contains origins of expectations of the TransportHook.HookTransport
type TransportHookMockHookTransportExpectationOrigins struct {
	origin          string
	originCtx       string
	originTransport string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmHookTransport *mTransportHookMockHookTransport) Optional() *mTransportHookMockHookTransport {
	mmHookTransport.optional = true
	return mmHookTransport
}

// Expect sets up expected params for TransportHook.HookTransport
func (mmHookTransport *mTransportHookMockHookTransport) Expect(ctx context.Context, transport http.RoundTripper) *mTransportHookMockHookTransport {
	if mmHookTransport.mock.funcHookTransport != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by Set")
	}

	if mmHookTransport.defaultExpectation == nil {
		mmHookTransport.defaultExpectation = &TransportHookMockHookTransportExpectation{}
	}

	if mmHookTransport.defaultExpectation.paramPtrs != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by ExpectParams functions")
	}

	mmHookTransport.defaultExpectation.params = &TransportHookMockHookTransportParams{ctx, transport}
	mmHookTransport.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmHookTransport.expectations {
		if minimock.Equal(e.params, mmHookTransport.defaultExpectation.params) {
			mmHookTransport.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmHookTransport.defaultExpectation.params)
		}
	}

	return mmHookTransport
}

// ExpectCtxParam1 sets up expected param ctx for TransportHook.HookTransport
func (mmHookTransport *mTransportHookMockHookTransport) ExpectCtxParam1(ctx context.Context) *mTransportHookMockHookTransport {
	if mmHookTransport.mock.funcHookTransport != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by Set")
	}

	if mmHookTransport.defaultExpectation == nil {
		mmHookTransport.defaultExpectation = &TransportHookMockHookTransportExpectation{}
	}

	if mmHookTransport.defaultExpectation.params != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by Expect")
	}

	if mmHookTransport.defaultExpectation.paramPtrs == nil {
		mmHookTransport.defaultExpectation.paramPtrs = &TransportHookMockHookTransportParamPtrs{}
	}
	mmHookTransport.defaultExpectation.paramPtrs.ctx = &ctx
	mmHookTransport.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmHookTransport
}

// ExpectTransportParam2 sets up expected param transport for TransportHook.HookTransport
func (mmHookTransport *mTransportHookMockHookTransport) ExpectTransportParam2(transport http.RoundTripper) *mTransportHookMockHookTransport {
	if mmHookTransport.mock.funcHookTransport != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by Set")
	}

	if mmHookTransport.defaultExpectation == nil {
		mmHookTransport.defaultExpectation = &TransportHookMockHookTransportExpectation{}
	}

	if mmHookTransport.defaultExpectation.params != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by Expect")
	}

	if mmHookTransport.defaultExpectation.paramPtrs == nil {
		mmHookTransport.defaultExpectation.paramPtrs = &TransportHookMockHookTransportParamPtrs{}
	}
	mmHookTransport.defaultExpectation.paramPtrs.transport = &transport
	mmHookTransport.defaultExpectation.expectationOrigins.originTransport = minimock.CallerInfo(1)

	return mmHookTransport
}

// Inspect accepts an inspector function that has same arguments as the TransportHook.HookTransport
func (mmHookTransport *mTransportHookMockHookTransport) Inspect(f func(ctx context.Context, transport http.RoundTripper)) *mTransportHookMockHookTransport {
	if mmHookTransport.mock.inspectFuncHookTransport != nil {
		mmHookTransport.mock.t.Fatalf("Inspect function is already set for TransportHookMock.HookTransport")
	}

	mmHookTransport.mock.inspectFuncHookTransport = f

	return mmHookTransport
}

// Return sets up results that will be returned by TransportHook.HookTransport
func (mmHookTransport *mTransportHookMockHookTransport) Return(r1 http.RoundTripper, err error) *TransportHookMock {
	if mmHookTransport.mock.funcHookTransport != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by Set")
	}

	if mmHookTransport.defaultExpectation == nil {
		mmHookTransport.defaultExpectation = &TransportHookMockHookTransportExpectation{mock: mmHookTransport.mock}
	}
	mmHookTransport.defaultExpectation.results = &TransportHookMockHookTransportResults{r1, err}
	mmHookTransport.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmHookTransport.mock
}

// Set uses given function f to mock the TransportHook.HookTransport method
func (mmHookTransport *mTransportHookMockHookTransport) Set(f func(ctx context.Context, transport http.RoundTripper) (r1 http.RoundTripper, err error)) *TransportHookMock {
	if mmHookTransport.defaultExpectation != nil {
		mmHookTransport.mock.t.Fatalf("Default expectation is already set for the TransportHook.HookTransport method")
	}

	if len(mmHookTransport.expectations) > 0 {
		mmHookTransport.mock.t.Fatalf("Some expectations are already set for the TransportHook.HookTransport method")
	}

	mmHookTransport.mock.funcHookTransport = f
	mmHookTransport.mock.funcHookTransportOrigin = minimock.CallerInfo(1)
	return mmHookTransport.mock
}

// When sets expectation for the TransportHook.HookTransport which will trigger the result defined by the following
// Then helper
func (mmHookTransport *mTransportHookMockHookTransport) When(ctx context.Context, transport http.RoundTripper) *TransportHookMockHookTransportExpectation {
	if mmHookTransport.mock.funcHookTransport != nil {
		mmHookTransport.mock.t.Fatalf("TransportHookMock.HookTransport mock is already set by Set")
	}

	expectation := &TransportHookMockHookTransportExpectation{
		mock:               mmHookTransport.mock,
		params:             &TransportHookMockHookTransportParams{ctx, transport},
		expectationOrigins: TransportHookMockHookTransportExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmHookTransport.expectations = append(mmHookTransport.expectations, expectation)
	return expectation
}

// Then sets up TransportHook.HookTransport return parameters for the expectation previously defined by the When method
func (e *TransportHookMockHookTransportExpectation) Then(r1 http.RoundTripper, err error) *TransportHookMock {
	e.results = &TransportHookMockHookTransportResults{r1, err}
	return e.mock
}

// Times sets number of times TransportHook.HookTransport should be invoked
func (mmHookTransport *mTransportHookMockHookTransport) Times(n uint64) *mTransportHookMockHookTransport {
	if n == 0 {
		mmHookTransport.mock.t.Fatalf("Times of TransportHookMock.HookTransport mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmHookTransport.expectedInvocations, n)
	mmHookTransport.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmHookTransport
}

func (mmHookTransport *mTransportHookMockHookTransport) invocationsDone() bool {
	if len(mmHookTransport.expectations) == 0 && mmHookTransport.defaultExpectation == nil && mmHookTransport.mock.funcHookTransport == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmHookTransport.mock.afterHookTransportCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmHookTransport.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// HookTransport implements mm_hook.TransportHook
func (mmHookTransport *TransportHookMock) HookTransport(ctx context.Context, transport http.RoundTripper) (r1 http.RoundTripper, err error) {
	mm_atomic.AddUint64(&mmHookTransport.beforeHookTransportCounter, 1)
	defer mm_atomic.AddUint64(&mmHookTransport.afterHookTransportCounter, 1)

	mmHookTransport.t.Helper()

	if mmHookTransport.inspectFuncHookTransport != nil {
		mmHookTransport.inspectFuncHookTransport(ctx, transport)
	}

	mm_params := TransportHookMockHookTransportParams{ctx, transport}

	// Record call args
	mmHookTransport.HookTransportMock.mutex.Lock()
	mmHookTransport.HookTransportMock.callArgs = append(mmHookTransport.HookTransportMock.callArgs, &mm_params)
	mmHookTransport.HookTransportMock.mutex.Unlock()

	for _, e := range mmHookTransport.HookTransportMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.r1, e.results.err
		}
	}

	if mmHookTransport.HookTransportMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmHookTransport.HookTransportMock.defaultExpectation.Counter, 1)
		mm_want := mmHookTransport.HookTransportMock.defaultExpectation.params
		mm_want_ptrs := mmHookTransport.HookTransportMock.defaultExpectation.paramPtrs

		mm_got := TransportHookMockHookTransportParams{ctx, transport}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmHookTransport.t.Errorf("TransportHookMock.HookTransport got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHookTransport.HookTransportMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.transport != nil && !minimock.Equal(*mm_want_ptrs.transport, mm_got.transport) {
				mmHookTransport.t.Errorf("TransportHookMock.HookTransport got unexpected parameter transport, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmHookTransport.HookTransportMock.defaultExpectation.expectationOrigins.originTransport, *mm_want_ptrs.transport, mm_got.transport, minimock.Diff(*mm_want_ptrs.transport, mm_got.transport))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmHookTransport.t.Errorf("TransportHookMock.HookTransport got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmHookTransport.HookTransportMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmHookTransport.HookTransportMock.defaultExpectation.results
		if mm_results == nil {
			mmHookTransport.t.Fatal("No results are set for the TransportHookMock.HookTransport")
		}
		return (*mm_results).r1, (*mm_results).err
	}
	if mmHookTransport.funcHookTransport != nil {
		return mmHookTransport.funcHookTransport(ctx, transport)
	}
	mmHookTransport.t.Fatalf("Unexpected call to TransportHookMock.HookTransport. %v %v", ctx, transport)
	return
}

// HookTransportAfterCounter returns a count of finished TransportHookMock.HookTransport invocations
func (mmHookTransport *TransportHookMock) HookTransportAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHookTransport.afterHookTransportCounter)
}

// HookTransportBeforeCounter returns a count of TransportHookMock.HookTransport invocations
func (mmHookTransport *TransportHookMock) HookTransportBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmHookTransport.beforeHookTransportCounter)
}

// Calls returns a list of arguments used in each call to TransportHookMock.HookTransport.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmHookTransport *mTransportHookMockHookTransport) Calls() []*TransportHookMockHookTransportParams {
	mmHookTransport.mutex.RLock()

	argCopy := make([]*TransportHookMockHookTransportParams, len(mmHookTransport.callArgs))
	copy(argCopy, mmHookTransport.callArgs)

	mmHookTransport.mutex.RUnlock()

	return argCopy
}

// MinimockHookTransportDone returns true if the count of the HookTransport invocations corresponds
// the number of defined expectations
func (m *TransportHookMock) MinimockHookTransportDone() bool {
	if m.HookTransportMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.HookTransportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.HookTransportMock.invocationsDone()
}

// MinimockHookTransportInspect logs each unmet expectation
func (m *TransportHookMock) MinimockHookTransportInspect() {
	for _, e := range m.HookTransportMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TransportHookMock.HookTransport at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterHookTransportCounter := mm_atomic.LoadUint64(&m.afterHookTransportCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.HookTransportMock.defaultExpectation != nil && afterHookTransportCounter < 1 {
		if m.HookTransportMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to TransportHookMock.HookTransport at\n%s", m.HookTransportMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to TransportHookMock.HookTransport at\n%s with params: %#v", m.HookTransportMock.defaultExpectation.expectationOrigins.origin, *m.HookTransportMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcHookTransport != nil && afterHookTransportCounter < 1 {
		m.t.Errorf("Expected call to TransportHookMock.HookTransport at\n%s", m.funcHookTransportOrigin)
	}

	if !m.HookTransportMock.invocationsDone() && afterHookTransportCounter > 0 {
		m.t.Errorf("Expected %d calls to TransportHookMock.HookTransport at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.HookTransportMock.expectedInvocations), m.HookTransportMock.expectedInvocationsOrigin, afterHookTransportCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TransportHookMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockHookTransportInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TransportHookMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TransportHookMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockHookTransportDone()
}
